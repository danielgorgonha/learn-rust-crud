{
	"info": {
		"_postman_id": "learn-rust-crud-collection",
		"name": "Learn Rust CRUD API",
        "description": "Postman collection to test the Rust CRUD API with JWT authentication",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"admin123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						                "description": "Logs in and returns access_token and refresh_token"
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh_token\": \"{{refresh_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/refresh",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"refresh"
							]
						},
						"description": "Renova o access_token usando o refresh_token"
					},
					"response": []
				},
				{
					"name": "Logout",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"logout"
							]
						},
						                "description": "Logs out by invalidating the refresh_token"
					},
					"response": []
				}
			],
			"description": "Endpoints de autenticação"
		},
		{
			"name": "CRUD Operations",
			"item": [
				{
					"name": "Create Data",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							                        "raw": "{\n    \"func_names\": [\"add\", \"mul\", \"sub\", \"div\"],\n    \"bytecode\": [0,97,115,109,1,0,0,0,1,6,1,96,2,127,127,1,127,3,2,1,0,7,7,1,3,97,100,100,0,0,10,9,1,7,0,32,0,32,1,106,11]\n}"
						},
						"url": {
							"raw": "{{base_url}}/data",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"data"
							]
						},
						                "description": "Creates a new data record"
					},
					"response": []
				},
				{
					"name": "Read All Data",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/data",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"data"
							]
						},
						                "description": "Lists all data records for the authenticated user"
					},
					"response": []
				},
				{
					"name": "Read Data by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/data/{{data_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"data",
								"{{data_id}}"
							]
						},
						                "description": "Searches for a specific record by ID"
					},
					"response": []
				},
				{
					"name": "Update Data",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							                        "raw": "{\n    \"func_names\": [\"add\", \"mul\", \"sub\", \"div\", \"rem\"],\n    \"bytecode\": [0,97,115,109,1,0,0,0,1,6,1,96,2,127,127,1,127,3,2,1,0,7,7,1,3,97,100,100,0,0,10,9,1,7,0,32,0,32,1,106,11]\n}"
						},
						"url": {
							"raw": "{{base_url}}/data/{{data_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"data",
								"{{data_id}}"
							]
						},
						                "description": "Updates an existing record"
					},
					"response": []
				},
				{
					"name": "Delete Data",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/data/{{data_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"data",
								"{{data_id}}"
							]
						},
						                "description": "Removes a record by ID"
					},
					"response": []
				},
				{
					"name": "Execute WASM Function",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fn\": \"add\",\n    \"arg\": [10, 20]\n}"
						},
						"url": {
							"raw": "{{base_url}}/execute/{{data_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"execute",
								"{{data_id}}"
							]
						},
						                "description": "Executes a WebAssembly function from the specified record"
					},
					"response": []
				}
			],
			"description": "Operações CRUD básicas"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					                "// Script to automatically capture access_token after login",
					"if (pm.response.code === 200) {",
					"    const responseJson = pm.response.json();",
					"    if (responseJson.access_token) {",
					"        pm.environment.set('access_token', responseJson.access_token);",
					                "        console.log('Access token saved automatically');",
					"    }",
					"    if (responseJson.refresh_token) {",
					"        pm.environment.set('refresh_token', responseJson.refresh_token);",
					                "        console.log('Refresh token saved automatically');",
					"    }",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://127.0.0.1:8080",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "refresh_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "data_id",
			"value": "",
			"type": "string"
		}
	]
} 